@page "/recipes/new"
@page "/recipes/edit/{recipeId:int?}"
@using BlazorRecipeApp.Mm.Recipes.Models
@using BlazorRecipeApp.Mm.Recipes.Services
@using BlazorRecipeApp.Mm.Shared.Data
@using BlazorRecipeApp.Mm.Shared.Interfaces
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject NavigationManager NavManager
@inject IRecipeService RecipeService

<h3>CreateRecipe</h3>

<EditForm Model="@RecipeModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Recipe Title:
            <InputText @bind-Value="RecipeModel.Title" class="form-control noradius" />
        </label>
        <label>
            Description (optional):
            <InputText @bind-Value="RecipeModel.Description" class="form-control noradius" />
        </label>
    </p>    
    <p>
        <label>
            Image path (optional):
            <InputText @bind-Value="RecipeModel.ImgPath" class="form-control noradius" />
        </label>
    </p>
    <p>
        <label>
            Portions (optional):
            <InputNumber @bind-Value="RecipeModel.Portions" class="form-control noradius"/>
        </label>
        <label>
            Time (optional):
            <InputNumber @bind-Value="RecipeModel.TimeInMinutes" class="form-control noradius"/>
        </label>
    </p>
    <p>
        <div id="oneIngredient">
            <label>Ingredients:</label>
            <label>Amount, Unit, Name, Description (optional)</label>
            <div>
                @for (int i = 0; i < RecipeModel.Ingredients.Count; i++)
                {
                    int index = i;
                    <div class="m-0 p-0 d-flex flex-row align-items-center">
                        <div>
                            <IngredientComponent IngredientModel="RecipeModel.Ingredients[i]" Groceries="@GroceryList"></IngredientComponent>
                        </div>
                        <div>
                            <IconButton Type="button"CssClass="btn-danger" Corners="noradius" OnClick="() => RemoveIngredient(index)">
                                <span class="material-icons-outlined">
                                    remove
                                </span>
                            </IconButton>
                        </div>
                    </div>
                }
            </div>
            <div class="my-2">
                <IconButton Type="button" CssClass="btn-primary" Corners="noradius" OnClick="AddIngredient" Text="Add ingredient">
                    <span class="material-icons-outlined">
                        add
                    </span>
                </IconButton>
            </div>
        </div>
    </p>
    <p>
        <label>
            Instructions (optional):
            <InputTextArea @bind-Value="RecipeModel.Instructions" class="form-control noradius"/>
        </label>
    </p>
    <IconButton Corners="noradius" CssClass="btn-primary" Text="Save" Type="submit"><span class="material-icons-outlined">save_alt</span></IconButton>
    <EasyButton.Button Type="button" CssClass="btn-outline-dark" Corners="noradius" OnClick="HandleCancelButton">Cancel</EasyButton.Button>
    

</EditForm>


@code {
    [Parameter]
    public int? RecipeId { get; set; }

    public Recipe RecipeModel { get; set; } = new Recipe();

    public List<Grocery> GroceryList { get; set; } = new List<Grocery>();

    protected override async Task OnParametersSetAsync()
    {
        if (RecipeId != null)
        {
            int id = RecipeId ?? 0;
            RecipeModel = await RecipeService.GetRecipeByIdAsync(id);
        }

        using (var ctx = ContextFactory.CreateDbContext())
        {
            try
            {
                GroceryList = ctx.Groceries.OrderBy(g=>g.GroceryName).ToList() ?? new List<Grocery>();
            }
            catch (Exception e)
            {
                GroceryList = new List<Grocery>();
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        RecipeModel.Ingredients
            .RemoveAll(i => string.IsNullOrEmpty(i.Name) && string.IsNullOrEmpty(i.Description));

        if (RecipeId is null)
        {
            int recipeId = await RecipeService.AddRecipeAsync(RecipeModel);
            NavManager.NavigateTo($"/recipes/{recipeId}");
        }
        else
        {
            await RecipeService.UpdateRecipeAsync(RecipeModel);
        }
    }

    private void AddIngredient()
    {
        RecipeModel.Ingredients.Add(new Ingredient());
    }

    private void RemoveIngredient(int index)
    {
        RecipeModel.Ingredients.RemoveAt(index);
        StateHasChanged();
    }

    private void HandleCancelButton()
    {
        NavManager.NavigateTo($"/recipes/{RecipeId}");
    }

}
