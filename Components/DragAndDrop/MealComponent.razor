<div class="row w-100">
    <div class="col-12 col-md-3 justify-content-center justify-content-md-start pl-md-3">
        <input class="name-input" @bind="Meal.Name" />
        <br />
        <p style="font-size: 8px">(Meal index: @MealIndex,<br/> Day index: @DayIndex)</p>
        <button type="button" class="day-button" @onclick="OnDeleteMeal_Click">Delete meal</button>
    </div>

    <div class="col-12 col-md-8">
        <ul class="list-unstyled dropzone"
            style="min-height: 3rem"
            ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);"
            @ondrop="HandleDrop">

            @foreach (var dish in Meal.Dishes)
            {
                <DragItem DDish="@dish" 
                          DayIndex="@DayIndex" 
                          MealIndex="@MealIndex" 
                          @key="@Container.GetElementKey()"/>
            }

        </ul>
    </div>
</div>

@code {
    [CascadingParameter] MenuStateContainer Container { get; set; }

    public Meal Meal { get; set; }
    [Parameter] public int DayIndex { get; set; }
    [Parameter] public int MealIndex { get; set; }

    [Parameter] public EventCallback<int> OnMealDelete { get; set; }

    protected override void OnParametersSet()
    {
        Meal = Container.Menu.Days[DayIndex].Meals[MealIndex];
    }

    public async Task OnDeleteMeal_Click()
    {
        await OnMealDelete.InvokeAsync(MealIndex);
    }

    public void HandleDrop()
    {
        Container.Payload.MealId = this.Meal.Id;
        Meal.Dishes.Add(Container.Payload);
        Container.UpdateMenuOnDrop();
    }
}
