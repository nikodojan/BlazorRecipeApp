<div class="form-inline">
    <InputNumber @bind-Value="IngredientModel.Amount" class="form-control noradius mx-1 my-1" style="width: 5rem"/>
    <InputText @bind-Value="IngredientModel.Unit" class="form-control noradius mx-1 my-1" style="width: 5rem"/>
    <InputSelect @bind-Value="IngredientModel.Name" class="form-control noradius mx-2 my-1">
        <option value="@NoName">Select a product...</option>
        @foreach (var g in Groceries)
        {
            <option value="@g.GroceryName">@g.GroceryName</option>
        }
    </InputSelect>
    
        @*<BlazoredTypeahead SearchMethod="SearchGroceryAsync"
                           @bind-Value="IngredientModel.Name"
                           ConvertMethod="ConvertGrocery">
            <SelectedTemplate Context="groceryName">
                @{
                    var selectedGrocery = LoadSelectedGrocery(groceryName);

                    <text>@selectedGrocery?.GroceryName</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="grocery">
                @grocery.GroceryName
            </ResultTemplate>
        </BlazoredTypeahead>*@
    <InputText @bind-Value="IngredientModel.Description" class="form-control noradius mx-1 my-1"/>
</div>

@code {
    [Parameter]
    public Ingredient IngredientModel { get; set; }

    [Parameter]
    public List<Grocery> Groceries { get; set; } = new List<Grocery>();

    public string NoName => string.Empty;

    //private async Task<IEnumerable<Grocery>> SearchGroceryAsync(string searchText)
    //{
    //    return await Task.FromResult(Groceries.Where(g => g.GroceryName.ToLower().Contains(searchText.ToLower())).ToList());
    //}

    //private string ConvertGrocery(Grocery grocery) => grocery?.GroceryName;

    //private Grocery LoadSelectedGrocery(string name) => Groceries.FirstOrDefault(g => g.GroceryName == name);
}
